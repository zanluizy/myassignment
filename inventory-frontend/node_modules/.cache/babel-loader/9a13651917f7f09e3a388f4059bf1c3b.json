{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nvar _index = require(\"../../../lib-vendor/d3-path/src/index.js\");\nvar _array = _interopRequireDefault(require(\"./array.js\"));\nvar _constant = _interopRequireDefault(require(\"./constant.js\"));\nvar _linear = _interopRequireDefault(require(\"./curve/linear.js\"));\nvar _point = require(\"./point.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _default(x, y) {\n  var defined = (0, _constant.default)(true),\n    context = null,\n    curve = _linear.default,\n    output = null;\n  x = typeof x === \"function\" ? x : x === undefined ? _point.x : (0, _constant.default)(x);\n  y = typeof y === \"function\" ? y : y === undefined ? _point.y : (0, _constant.default)(y);\n  function line(data) {\n    var i,\n      n = (data = (0, _array.default)(data)).length,\n      d,\n      defined0 = false,\n      buffer;\n    if (context == null) output = curve(buffer = (0, _index.path)());\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();else output.lineEnd();\n      }\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n  line.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : (0, _constant.default)(+_), line) : x;\n  };\n  line.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : (0, _constant.default)(+_), line) : y;\n  };\n  line.defined = function (_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : (0, _constant.default)(!!_), line) : defined;\n  };\n  line.curve = function (_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n  line.context = function (_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n  return line;\n}","map":null,"metadata":{},"sourceType":"script"}