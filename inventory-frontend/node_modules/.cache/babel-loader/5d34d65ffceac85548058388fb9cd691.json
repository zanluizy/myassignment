{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sequentialQuantile;\nvar _index = require(\"../../../lib-vendor/d3-array/src/index.js\");\nvar _continuous = require(\"./continuous.js\");\nvar _init = require(\"./init.js\");\nfunction sequentialQuantile() {\n  var domain = [],\n    interpolator = _continuous.identity;\n  function scale(x) {\n    if (x != null && !isNaN(x = +x)) return interpolator(((0, _index.bisect)(domain, x, 1) - 1) / (domain.length - 1));\n  }\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(_index.ascending);\n    return scale;\n  };\n  scale.interpolator = function (_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n  scale.range = function () {\n    return domain.map((d, i) => interpolator(i / (domain.length - 1)));\n  };\n  scale.quantiles = function (n) {\n    return Array.from({\n      length: n + 1\n    }, (_, i) => (0, _index.quantile)(domain, i / n));\n  };\n  scale.copy = function () {\n    return sequentialQuantile(interpolator).domain(domain);\n  };\n  return _init.initInterpolator.apply(scale, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}