{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport isNil from 'lodash/isNil';\nimport { isValidElement } from 'react';\nimport isFunction from 'lodash/isFunction';\nimport { getPercentValue } from './DataUtils';\nimport { parseScale, checkDomainOfScale, getTicksOfScale } from './ChartUtils';\nexport var RADIAN = Math.PI / 180;\nexport var degreeToRadian = function degreeToRadian(angle) {\n  return angle * Math.PI / 180;\n};\nexport var radianToDegree = function radianToDegree(angleInRadian) {\n  return angleInRadian * 180 / Math.PI;\n};\nexport var polarToCartesian = function polarToCartesian(cx, cy, radius, angle) {\n  return {\n    x: cx + Math.cos(-RADIAN * angle) * radius,\n    y: cy + Math.sin(-RADIAN * angle) * radius\n  };\n};\nexport var getMaxRadius = function getMaxRadius(width, height) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n  return Math.min(Math.abs(width - (offset.left || 0) - (offset.right || 0)), Math.abs(height - (offset.top || 0) - (offset.bottom || 0))) / 2;\n};\n\n/**\n * Calculate the scale function, position, width, height of axes\n * @param  {Object} props     Latest props\n * @param  {Object} axisMap   The configuration of axes\n * @param  {Object} offset    The offset of main part in the svg element\n * @param  {Object} axisType  The type of axes, radius-axis or angle-axis\n * @param  {String} chartName The name of chart\n * @return {Object} Configuration\n */\nexport var formatAxisMap = function formatAxisMap(props, axisMap, offset, axisType, chartName) {\n  var width = props.width,\n    height = props.height;\n  var startAngle = props.startAngle,\n    endAngle = props.endAngle;\n  var cx = getPercentValue(props.cx, width, width / 2);\n  var cy = getPercentValue(props.cy, height, height / 2);\n  var maxRadius = getMaxRadius(width, height, offset);\n  var innerRadius = getPercentValue(props.innerRadius, maxRadius, 0);\n  var outerRadius = getPercentValue(props.outerRadius, maxRadius, maxRadius * 0.8);\n  var ids = Object.keys(axisMap);\n  return ids.reduce(function (result, id) {\n    var axis = axisMap[id];\n    var domain = axis.domain,\n      reversed = axis.reversed;\n    var range;\n    if (isNil(axis.range)) {\n      if (axisType === 'angleAxis') {\n        range = [startAngle, endAngle];\n      } else if (axisType === 'radiusAxis') {\n        range = [innerRadius, outerRadius];\n      }\n      if (reversed) {\n        range = [range[1], range[0]];\n      }\n    } else {\n      range = axis.range;\n      var _range = range;\n      var _range2 = _slicedToArray(_range, 2);\n      startAngle = _range2[0];\n      endAngle = _range2[1];\n    }\n    var _parseScale = parseScale(axis, chartName),\n      realScaleType = _parseScale.realScaleType,\n      scale = _parseScale.scale;\n    scale.domain(domain).range(range);\n    checkDomainOfScale(scale);\n    var ticks = getTicksOfScale(scale, _objectSpread(_objectSpread({}, axis), {}, {\n      realScaleType: realScaleType\n    }));\n    var finalAxis = _objectSpread(_objectSpread(_objectSpread({}, axis), ticks), {}, {\n      range: range,\n      radius: outerRadius,\n      realScaleType: realScaleType,\n      scale: scale,\n      cx: cx,\n      cy: cy,\n      innerRadius: innerRadius,\n      outerRadius: outerRadius,\n      startAngle: startAngle,\n      endAngle: endAngle\n    });\n    return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, id, finalAxis));\n  }, {});\n};\nexport var distanceBetweenPoints = function distanceBetweenPoints(point, anotherPoint) {\n  var x1 = point.x,\n    y1 = point.y;\n  var x2 = anotherPoint.x,\n    y2 = anotherPoint.y;\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n};\nexport var getAngleOfPoint = function getAngleOfPoint(_ref, _ref2) {\n  var x = _ref.x,\n    y = _ref.y;\n  var cx = _ref2.cx,\n    cy = _ref2.cy;\n  var radius = distanceBetweenPoints({\n    x: x,\n    y: y\n  }, {\n    x: cx,\n    y: cy\n  });\n  if (radius <= 0) {\n    return {\n      radius: radius\n    };\n  }\n  var cos = (x - cx) / radius;\n  var angleInRadian = Math.acos(cos);\n  if (y > cy) {\n    angleInRadian = 2 * Math.PI - angleInRadian;\n  }\n  return {\n    radius: radius,\n    angle: radianToDegree(angleInRadian),\n    angleInRadian: angleInRadian\n  };\n};\nexport var formatAngleOfSector = function formatAngleOfSector(_ref3) {\n  var startAngle = _ref3.startAngle,\n    endAngle = _ref3.endAngle;\n  var startCnt = Math.floor(startAngle / 360);\n  var endCnt = Math.floor(endAngle / 360);\n  var min = Math.min(startCnt, endCnt);\n  return {\n    startAngle: startAngle - min * 360,\n    endAngle: endAngle - min * 360\n  };\n};\nvar reverseFormatAngleOfSetor = function reverseFormatAngleOfSetor(angle, _ref4) {\n  var startAngle = _ref4.startAngle,\n    endAngle = _ref4.endAngle;\n  var startCnt = Math.floor(startAngle / 360);\n  var endCnt = Math.floor(endAngle / 360);\n  var min = Math.min(startCnt, endCnt);\n  return angle + min * 360;\n};\nexport var inRangeOfSector = function inRangeOfSector(_ref5, sector) {\n  var x = _ref5.x,\n    y = _ref5.y;\n  var _getAngleOfPoint = getAngleOfPoint({\n      x: x,\n      y: y\n    }, sector),\n    radius = _getAngleOfPoint.radius,\n    angle = _getAngleOfPoint.angle;\n  var innerRadius = sector.innerRadius,\n    outerRadius = sector.outerRadius;\n  if (radius < innerRadius || radius > outerRadius) {\n    return false;\n  }\n  if (radius === 0) {\n    return true;\n  }\n  var _formatAngleOfSector = formatAngleOfSector(sector),\n    startAngle = _formatAngleOfSector.startAngle,\n    endAngle = _formatAngleOfSector.endAngle;\n  var formatAngle = angle;\n  var inRange;\n  if (startAngle <= endAngle) {\n    while (formatAngle > endAngle) {\n      formatAngle -= 360;\n    }\n    while (formatAngle < startAngle) {\n      formatAngle += 360;\n    }\n    inRange = formatAngle >= startAngle && formatAngle <= endAngle;\n  } else {\n    while (formatAngle > startAngle) {\n      formatAngle -= 360;\n    }\n    while (formatAngle < endAngle) {\n      formatAngle += 360;\n    }\n    inRange = formatAngle >= endAngle && formatAngle <= startAngle;\n  }\n  if (inRange) {\n    return _objectSpread(_objectSpread({}, sector), {}, {\n      radius: radius,\n      angle: reverseFormatAngleOfSetor(formatAngle, sector)\n    });\n  }\n  return null;\n};\nexport var getTickClassName = function getTickClassName(tick) {\n  return ! /*#__PURE__*/isValidElement(tick) && !isFunction(tick) && typeof tick !== 'boolean' ? tick.className : '';\n};","map":null,"metadata":{},"sourceType":"module"}