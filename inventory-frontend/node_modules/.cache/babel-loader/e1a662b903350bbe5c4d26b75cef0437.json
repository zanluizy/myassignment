{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global[\"fast-equals\"] = {}));\n})(this, function (exports) {\n  'use strict';\n\n  var getOwnPropertyNames = Object.getOwnPropertyNames,\n    getOwnPropertySymbols = Object.getOwnPropertySymbols;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  /**\n   * Combine two comparators into a single comparators.\n   */\n  function combineComparators(comparatorA, comparatorB) {\n    return function isEqual(a, b, state) {\n      return comparatorA(a, b, state) && comparatorB(a, b, state);\n    };\n  }\n  /**\n   * Wrap the provided `areItemsEqual` method to manage the circular state, allowing\n   * for circular references to be safely included in the comparison without creating\n   * stack overflows.\n   */\n  function createIsCircular(areItemsEqual) {\n    return function isCircular(a, b, state) {\n      if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\n        return areItemsEqual(a, b, state);\n      }\n      var cache = state.cache;\n      var cachedA = cache.get(a);\n      var cachedB = cache.get(b);\n      if (cachedA && cachedB) {\n        return cachedA === b && cachedB === a;\n      }\n      cache.set(a, b);\n      cache.set(b, a);\n      var result = areItemsEqual(a, b, state);\n      cache.delete(a);\n      cache.delete(b);\n      return result;\n    };\n  }\n  /**\n   * Get the properties to strictly examine, which include both own properties that are\n   * not enumerable and symbol properties.\n   */\n  function getStrictProperties(object) {\n    return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));\n  }\n  /**\n   * Whether the object contains the property passed as an own property.\n   */\n  var hasOwn = Object.hasOwn || function (object, property) {\n    return hasOwnProperty.call(object, property);\n  };\n  /**\n   * Whether the values passed are strictly equal or both NaN.\n   */\n  function sameValueZeroEqual(a, b) {\n    return a || b ? a === b : a === b || a !== a && b !== b;\n  }\n  var OWNER = '_owner';\n  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,\n    keys = Object.keys;\n  /**\n   * Whether the arrays are equal in value.\n   */\n  function areArraysEqual(a, b, state) {\n    var index = a.length;\n    if (b.length !== index) {\n      return false;\n    }\n    while (index-- > 0) {\n      if (!state.equals(a[index], b[index], index, index, a, b, state)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Whether the dates passed are equal in value.\n   */\n  function areDatesEqual(a, b) {\n    return sameValueZeroEqual(a.getTime(), b.getTime());\n  }\n  /**\n   * Whether the `Map`s are equal in value.\n   */\n  function areMapsEqual(a, b, state) {\n    if (a.size !== b.size) {\n      return false;\n    }\n    var matchedIndices = {};\n    var aIterable = a.entries();\n    var index = 0;\n    var aResult;\n    var bResult;\n    while (aResult = aIterable.next()) {\n      if (aResult.done) {\n        break;\n      }\n      var bIterable = b.entries();\n      var hasMatch = false;\n      var matchIndex = 0;\n      while (bResult = bIterable.next()) {\n        if (bResult.done) {\n          break;\n        }\n        var _a = aResult.value,\n          aKey = _a[0],\n          aValue = _a[1];\n        var _b = bResult.value,\n          bKey = _b[0],\n          bValue = _b[1];\n        if (!hasMatch && !matchedIndices[matchIndex] && (hasMatch = state.equals(aKey, bKey, index, matchIndex, a, b, state) && state.equals(aValue, bValue, aKey, bKey, a, b, state))) {\n          matchedIndices[matchIndex] = true;\n        }\n        matchIndex++;\n      }\n      if (!hasMatch) {\n        return false;\n      }\n      index++;\n    }\n    return true;\n  }\n  /**\n   * Whether the objects are equal in value.\n   */\n  function areObjectsEqual(a, b, state) {\n    var properties = keys(a);\n    var index = properties.length;\n    if (keys(b).length !== index) {\n      return false;\n    }\n    var property;\n    // Decrementing `while` showed faster results than either incrementing or\n    // decrementing `for` loop and than an incrementing `while` loop. Declarative\n    // methods like `some` / `every` were not used to avoid incurring the garbage\n    // cost of anonymous callbacks.\n    while (index-- > 0) {\n      property = properties[index];\n      if (property === OWNER && (a.$$typeof || b.$$typeof) && a.$$typeof !== b.$$typeof) {\n        return false;\n      }\n      if (!hasOwn(b, property) || !state.equals(a[property], b[property], property, property, a, b, state)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Whether the objects are equal in value with strict property checking.\n   */\n  function areObjectsEqualStrict(a, b, state) {\n    var properties = getStrictProperties(a);\n    var index = properties.length;\n    if (getStrictProperties(b).length !== index) {\n      return false;\n    }\n    var property;\n    var descriptorA;\n    var descriptorB;\n    // Decrementing `while` showed faster results than either incrementing or\n    // decrementing `for` loop and than an incrementing `while` loop. Declarative\n    // methods like `some` / `every` were not used to avoid incurring the garbage\n    // cost of anonymous callbacks.\n    while (index-- > 0) {\n      property = properties[index];\n      if (property === OWNER && (a.$$typeof || b.$$typeof) && a.$$typeof !== b.$$typeof) {\n        return false;\n      }\n      if (!hasOwn(b, property)) {\n        return false;\n      }\n      if (!state.equals(a[property], b[property], property, property, a, b, state)) {\n        return false;\n      }\n      descriptorA = getOwnPropertyDescriptor(a, property);\n      descriptorB = getOwnPropertyDescriptor(b, property);\n      if ((descriptorA || descriptorB) && (!descriptorA || !descriptorB || descriptorA.configurable !== descriptorB.configurable || descriptorA.enumerable !== descriptorB.enumerable || descriptorA.writable !== descriptorB.writable)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Whether the primitive wrappers passed are equal in value.\n   */\n  function arePrimitiveWrappersEqual(a, b) {\n    return sameValueZeroEqual(a.valueOf(), b.valueOf());\n  }\n  /**\n   * Whether the regexps passed are equal in value.\n   */\n  function areRegExpsEqual(a, b) {\n    return a.source === b.source && a.flags === b.flags;\n  }\n  /**\n   * Whether the `Set`s are equal in value.\n   */\n  function areSetsEqual(a, b, state) {\n    if (a.size !== b.size) {\n      return false;\n    }\n    var matchedIndices = {};\n    var aIterable = a.values();\n    var aResult;\n    var bResult;\n    while (aResult = aIterable.next()) {\n      if (aResult.done) {\n        break;\n      }\n      var bIterable = b.values();\n      var hasMatch = false;\n      var matchIndex = 0;\n      while (bResult = bIterable.next()) {\n        if (bResult.done) {\n          break;\n        }\n        if (!hasMatch && !matchedIndices[matchIndex] && (hasMatch = state.equals(aResult.value, bResult.value, aResult.value, bResult.value, a, b, state))) {\n          matchedIndices[matchIndex] = true;\n        }\n        matchIndex++;\n      }\n      if (!hasMatch) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Whether the TypedArray instances are equal in value.\n   */\n  function areTypedArraysEqual(a, b) {\n    var index = a.length;\n    if (b.length !== index) {\n      return false;\n    }\n    while (index-- > 0) {\n      if (a[index] !== b[index]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  var ARGUMENTS_TAG = '[object Arguments]';\n  var BOOLEAN_TAG = '[object Boolean]';\n  var DATE_TAG = '[object Date]';\n  var MAP_TAG = '[object Map]';\n  var NUMBER_TAG = '[object Number]';\n  var OBJECT_TAG = '[object Object]';\n  var REG_EXP_TAG = '[object RegExp]';\n  var SET_TAG = '[object Set]';\n  var STRING_TAG = '[object String]';\n  var isArray = Array.isArray;\n  var isTypedArray = typeof ArrayBuffer === 'function' && ArrayBuffer.isView ? ArrayBuffer.isView : null;\n  var assign = Object.assign;\n  var getTag = Object.prototype.toString.call.bind(Object.prototype.toString);\n  /**\n   * Create a comparator method based on the type-specific equality comparators passed.\n   */\n  function createEqualityComparator(_a) {\n    var areArraysEqual = _a.areArraysEqual,\n      areDatesEqual = _a.areDatesEqual,\n      areMapsEqual = _a.areMapsEqual,\n      areObjectsEqual = _a.areObjectsEqual,\n      arePrimitiveWrappersEqual = _a.arePrimitiveWrappersEqual,\n      areRegExpsEqual = _a.areRegExpsEqual,\n      areSetsEqual = _a.areSetsEqual,\n      areTypedArraysEqual = _a.areTypedArraysEqual;\n    /**\n     * compare the value of the two objects and return true if they are equivalent in values\n     */\n    return function comparator(a, b, state) {\n      // If the items are strictly equal, no need to do a value comparison.\n      if (a === b) {\n        return true;\n      }\n      // If the items are not non-nullish objects, then the only possibility\n      // of them being equal but not strictly is if they are both `NaN`. Since\n      // `NaN` is uniquely not equal to itself, we can use self-comparison of\n      // both objects, which is faster than `isNaN()`.\n      if (a == null || b == null || typeof a !== 'object' || typeof b !== 'object') {\n        return a !== a && b !== b;\n      }\n      var constructor = a.constructor;\n      // Checks are listed in order of commonality of use-case:\n      //   1. Common complex object types (plain object, array)\n      //   2. Common data values (date, regexp)\n      //   3. Less-common complex object types (map, set)\n      //   4. Less-common data values (promise, primitive wrappers)\n      // Inherently this is both subjective and assumptive, however\n      // when reviewing comparable libraries in the wild this order\n      // appears to be generally consistent.\n      // Constructors should match, otherwise there is potential for false positives\n      // between class and subclass or custom object and POJO.\n      if (constructor !== b.constructor) {\n        return false;\n      }\n      // `isPlainObject` only checks against the object's own realm. Cross-realm\n      // comparisons are rare, and will be handled in the ultimate fallback, so\n      // we can avoid capturing the string tag.\n      if (constructor === Object) {\n        return areObjectsEqual(a, b, state);\n      }\n      // `isArray()` works on subclasses and is cross-realm, so we can avoid capturing\n      // the string tag or doing an `instanceof` check.\n      if (isArray(a)) {\n        return areArraysEqual(a, b, state);\n      }\n      // `isTypedArray()` works on all possible TypedArray classes, so we can avoid\n      // capturing the string tag or comparing against all possible constructors.\n      if (isTypedArray != null && isTypedArray(a)) {\n        return areTypedArraysEqual(a, b, state);\n      }\n      // Try to fast-path equality checks for other complex object types in the\n      // same realm to avoid capturing the string tag. Strict equality is used\n      // instead of `instanceof` because it is more performant for the common\n      // use-case. If someone is subclassing a native class, it will be handled\n      // with the string tag comparison.\n      if (constructor === Date) {\n        return areDatesEqual(a, b, state);\n      }\n      if (constructor === RegExp) {\n        return areRegExpsEqual(a, b, state);\n      }\n      if (constructor === Map) {\n        return areMapsEqual(a, b, state);\n      }\n      if (constructor === Set) {\n        return areSetsEqual(a, b, state);\n      }\n      // Since this is a custom object, capture the string tag to determing its type.\n      // This is reasonably performant in modern environments like v8 and SpiderMonkey.\n      var tag = getTag(a);\n      if (tag === DATE_TAG) {\n        return areDatesEqual(a, b, state);\n      }\n      if (tag === REG_EXP_TAG) {\n        return areRegExpsEqual(a, b, state);\n      }\n      if (tag === MAP_TAG) {\n        return areMapsEqual(a, b, state);\n      }\n      if (tag === SET_TAG) {\n        return areSetsEqual(a, b, state);\n      }\n      if (tag === OBJECT_TAG) {\n        // The exception for value comparison is custom `Promise`-like class instances. These should\n        // be treated the same as standard `Promise` objects, which means strict equality, and if\n        // it reaches this point then that strict equality comparison has already failed.\n        return typeof a.then !== 'function' && typeof b.then !== 'function' && areObjectsEqual(a, b, state);\n      }\n      // If an arguments tag, it should be treated as a standard object.\n      if (tag === ARGUMENTS_TAG) {\n        return areObjectsEqual(a, b, state);\n      }\n      // As the penultimate fallback, check if the values passed are primitive wrappers. This\n      // is very rare in modern JS, which is why it is deprioritized compared to all other object\n      // types.\n      if (tag === BOOLEAN_TAG || tag === NUMBER_TAG || tag === STRING_TAG) {\n        return arePrimitiveWrappersEqual(a, b, state);\n      }\n      // If not matching any tags that require a specific type of comparison, then we hard-code false because\n      // the only thing remaining is strict equality, which has already been compared. This is for a few reasons:\n      //   - Certain types that cannot be introspected (e.g., `WeakMap`). For these types, this is the only\n      //     comparison that can be made.\n      //   - For types that can be introspected, but rarely have requirements to be compared\n      //     (`ArrayBuffer`, `DataView`, etc.), the cost is avoided to prioritize the common\n      //     use-cases (may be included in a future release, if requested enough).\n      //   - For types that can be introspected but do not have an objective definition of what\n      //     equality is (`Error`, etc.), the subjective decision is to be conservative and strictly compare.\n      // In all cases, these decisions should be reevaluated based on changes to the language and\n      // common development practices.\n      return false;\n    };\n  }\n  /**\n   * Create the configuration object used for building comparators.\n   */\n  function createEqualityComparatorConfig(_a) {\n    var circular = _a.circular,\n      createCustomConfig = _a.createCustomConfig,\n      strict = _a.strict;\n    var config = {\n      areArraysEqual: strict ? areObjectsEqualStrict : areArraysEqual,\n      areDatesEqual: areDatesEqual,\n      areMapsEqual: strict ? combineComparators(areMapsEqual, areObjectsEqualStrict) : areMapsEqual,\n      areObjectsEqual: strict ? areObjectsEqualStrict : areObjectsEqual,\n      arePrimitiveWrappersEqual: arePrimitiveWrappersEqual,\n      areRegExpsEqual: areRegExpsEqual,\n      areSetsEqual: strict ? combineComparators(areSetsEqual, areObjectsEqualStrict) : areSetsEqual,\n      areTypedArraysEqual: strict ? areObjectsEqualStrict : areTypedArraysEqual\n    };\n    if (createCustomConfig) {\n      config = assign({}, config, createCustomConfig(config));\n    }\n    if (circular) {\n      var areArraysEqual$1 = createIsCircular(config.areArraysEqual);\n      var areMapsEqual$1 = createIsCircular(config.areMapsEqual);\n      var areObjectsEqual$1 = createIsCircular(config.areObjectsEqual);\n      var areSetsEqual$1 = createIsCircular(config.areSetsEqual);\n      config = assign({}, config, {\n        areArraysEqual: areArraysEqual$1,\n        areMapsEqual: areMapsEqual$1,\n        areObjectsEqual: areObjectsEqual$1,\n        areSetsEqual: areSetsEqual$1\n      });\n    }\n    return config;\n  }\n  /**\n   * Default equality comparator pass-through, used as the standard `isEqual` creator for\n   * use inside the built comparator.\n   */\n  function createInternalEqualityComparator(compare) {\n    return function (a, b, _indexOrKeyA, _indexOrKeyB, _parentA, _parentB, state) {\n      return compare(a, b, state);\n    };\n  }\n  /**\n   * Create the `isEqual` function used by the consuming application.\n   */\n  function createIsEqual(_a) {\n    var circular = _a.circular,\n      comparator = _a.comparator,\n      createState = _a.createState,\n      equals = _a.equals,\n      strict = _a.strict;\n    if (createState) {\n      return function isEqual(a, b) {\n        var _a = createState(),\n          _b = _a.cache,\n          cache = _b === void 0 ? circular ? new WeakMap() : undefined : _b,\n          meta = _a.meta;\n        return comparator(a, b, {\n          cache: cache,\n          equals: equals,\n          meta: meta,\n          strict: strict\n        });\n      };\n    }\n    if (circular) {\n      return function isEqual(a, b) {\n        return comparator(a, b, {\n          cache: new WeakMap(),\n          equals: equals,\n          meta: undefined,\n          strict: strict\n        });\n      };\n    }\n    var state = {\n      cache: undefined,\n      equals: equals,\n      meta: undefined,\n      strict: strict\n    };\n    return function isEqual(a, b) {\n      return comparator(a, b, state);\n    };\n  }\n\n  /**\n   * Whether the items passed are deeply-equal in value.\n   */\n  var deepEqual = createCustomEqual();\n  /**\n   * Whether the items passed are deeply-equal in value based on strict comparison.\n   */\n  var strictDeepEqual = createCustomEqual({\n    strict: true\n  });\n  /**\n   * Whether the items passed are deeply-equal in value, including circular references.\n   */\n  var circularDeepEqual = createCustomEqual({\n    circular: true\n  });\n  /**\n   * Whether the items passed are deeply-equal in value, including circular references,\n   * based on strict comparison.\n   */\n  var strictCircularDeepEqual = createCustomEqual({\n    circular: true,\n    strict: true\n  });\n  /**\n   * Whether the items passed are shallowly-equal in value.\n   */\n  var shallowEqual = createCustomEqual({\n    createInternalComparator: function () {\n      return sameValueZeroEqual;\n    }\n  });\n  /**\n   * Whether the items passed are shallowly-equal in value based on strict comparison\n   */\n  var strictShallowEqual = createCustomEqual({\n    strict: true,\n    createInternalComparator: function () {\n      return sameValueZeroEqual;\n    }\n  });\n  /**\n   * Whether the items passed are shallowly-equal in value, including circular references.\n   */\n  var circularShallowEqual = createCustomEqual({\n    circular: true,\n    createInternalComparator: function () {\n      return sameValueZeroEqual;\n    }\n  });\n  /**\n   * Whether the items passed are shallowly-equal in value, including circular references,\n   * based on strict comparison.\n   */\n  var strictCircularShallowEqual = createCustomEqual({\n    circular: true,\n    createInternalComparator: function () {\n      return sameValueZeroEqual;\n    },\n    strict: true\n  });\n  /**\n   * Create a custom equality comparison method.\n   *\n   * This can be done to create very targeted comparisons in extreme hot-path scenarios\n   * where the standard methods are not performant enough, but can also be used to provide\n   * support for legacy environments that do not support expected features like\n   * `RegExp.prototype.flags` out of the box.\n   */\n  function createCustomEqual(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = options.circular,\n      circular = _a === void 0 ? false : _a,\n      createCustomInternalComparator = options.createInternalComparator,\n      createState = options.createState,\n      _b = options.strict,\n      strict = _b === void 0 ? false : _b;\n    var config = createEqualityComparatorConfig(options);\n    var comparator = createEqualityComparator(config);\n    var equals = createCustomInternalComparator ? createCustomInternalComparator(comparator) : createInternalEqualityComparator(comparator);\n    return createIsEqual({\n      circular: circular,\n      comparator: comparator,\n      createState: createState,\n      equals: equals,\n      strict: strict\n    });\n  }\n  exports.circularDeepEqual = circularDeepEqual;\n  exports.circularShallowEqual = circularShallowEqual;\n  exports.createCustomEqual = createCustomEqual;\n  exports.deepEqual = deepEqual;\n  exports.sameValueZeroEqual = sameValueZeroEqual;\n  exports.shallowEqual = shallowEqual;\n  exports.strictCircularDeepEqual = strictCircularDeepEqual;\n  exports.strictCircularShallowEqual = strictCircularShallowEqual;\n  exports.strictDeepEqual = strictDeepEqual;\n  exports.strictShallowEqual = strictShallowEqual;\n});","map":null,"metadata":{},"sourceType":"script"}