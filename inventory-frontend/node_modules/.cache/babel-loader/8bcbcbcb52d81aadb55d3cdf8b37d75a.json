{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = bisector;\nvar _ascending = _interopRequireDefault(require(\"./ascending.js\"));\nvar _descending = _interopRequireDefault(require(\"./descending.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction bisector(f) {\n  let compare1, compare2, delta; // If an accessor is specified, promote it to a comparator. In this case we\n  // can test whether the search value is (self-) comparable. We can’t do this\n  // for a comparator (except for specific, known comparators) because we can’t\n  // tell if the comparator is symmetric, and an asymmetric comparator can’t be\n  // used to test whether a single value is comparable.\n\n  if (f.length !== 2) {\n    compare1 = _ascending.default;\n    compare2 = (d, x) => (0, _ascending.default)(f(d), x);\n    delta = (d, x) => f(d) - x;\n  } else {\n    compare1 = f === _ascending.default || f === _descending.default ? f : zero;\n    compare2 = f;\n    delta = f;\n  }\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = lo + hi >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = lo + hi >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n  return {\n    left,\n    center,\n    right\n  };\n}\nfunction zero() {\n  return 0;\n}","map":null,"metadata":{},"sourceType":"script"}