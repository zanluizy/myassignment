{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nimport React, { useState } from 'react';\nimport { scaleLinear } from 'victory-vendor/d3-scale';\nimport clsx from 'clsx';\nimport { findChildByType } from '../util/ReactUtils';\nimport { Surface } from '../container/Surface';\nimport { Layer } from '../container/Layer';\nimport { Sector } from '../shape/Sector';\nimport { Text } from '../component/Text';\nimport { polarToCartesian } from '../util/PolarUtils';\nimport { Tooltip } from '../component/Tooltip';\nvar defaultTextProps = {\n  fontWeight: 'bold',\n  paintOrder: 'stroke fill',\n  fontSize: '.75rem',\n  stroke: '#FFF',\n  fill: 'black',\n  pointerEvents: 'none'\n};\nfunction getMaxDepthOf(node) {\n  if (!node.children || node.children.length === 0) return 1;\n\n  // Calculate depth for each child and find the maximum\n  var childDepths = node.children.map(function (d) {\n    return getMaxDepthOf(d);\n  });\n  return 1 + Math.max.apply(Math, _toConsumableArray(childDepths));\n}\nexport var SunburstChart = function SunburstChart(_ref) {\n  var className = _ref.className,\n    data = _ref.data,\n    children = _ref.children,\n    width = _ref.width,\n    height = _ref.height,\n    _ref$padding = _ref.padding,\n    padding = _ref$padding === void 0 ? 2 : _ref$padding,\n    _ref$dataKey = _ref.dataKey,\n    dataKey = _ref$dataKey === void 0 ? 'value' : _ref$dataKey,\n    _ref$ringPadding = _ref.ringPadding,\n    ringPadding = _ref$ringPadding === void 0 ? 2 : _ref$ringPadding,\n    _ref$innerRadius = _ref.innerRadius,\n    innerRadius = _ref$innerRadius === void 0 ? 50 : _ref$innerRadius,\n    _ref$fill = _ref.fill,\n    fill = _ref$fill === void 0 ? '#333' : _ref$fill,\n    _ref$stroke = _ref.stroke,\n    stroke = _ref$stroke === void 0 ? '#FFF' : _ref$stroke,\n    _ref$textOptions = _ref.textOptions,\n    textOptions = _ref$textOptions === void 0 ? defaultTextProps : _ref$textOptions,\n    _ref$outerRadius = _ref.outerRadius,\n    outerRadius = _ref$outerRadius === void 0 ? Math.min(width, height) / 2 : _ref$outerRadius,\n    _ref$cx = _ref.cx,\n    cx = _ref$cx === void 0 ? width / 2 : _ref$cx,\n    _ref$cy = _ref.cy,\n    cy = _ref$cy === void 0 ? height / 2 : _ref$cy,\n    _ref$startAngle = _ref.startAngle,\n    startAngle = _ref$startAngle === void 0 ? 0 : _ref$startAngle,\n    _ref$endAngle = _ref.endAngle,\n    endAngle = _ref$endAngle === void 0 ? 360 : _ref$endAngle,\n    onClick = _ref.onClick,\n    onMouseEnter = _ref.onMouseEnter,\n    onMouseLeave = _ref.onMouseLeave;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isTooltipActive = _useState2[0],\n    setIsTooltipActive = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    activeNode = _useState4[0],\n    setActiveNode = _useState4[1];\n  var rScale = scaleLinear([0, data[dataKey]], [0, endAngle]);\n  var treeDepth = getMaxDepthOf(data);\n  var thickness = (outerRadius - innerRadius) / treeDepth;\n  var sectors = [];\n  var positions = new Map([]);\n\n  // event handlers\n  function handleMouseEnter(node, e) {\n    if (onMouseEnter) onMouseEnter(node, e);\n    setActiveNode(node);\n    setIsTooltipActive(true);\n  }\n  function handleMouseLeave(node, e) {\n    if (onMouseLeave) onMouseLeave(node, e);\n    setActiveNode(null);\n    setIsTooltipActive(false);\n  }\n  function handleClick(node) {\n    if (onClick) onClick(node);\n  }\n\n  // recursively add nodes for each data point and its children\n  function drawArcs(childNodes, options) {\n    var radius = options.radius,\n      innerR = options.innerR,\n      initialAngle = options.initialAngle,\n      childColor = options.childColor;\n    var currentAngle = initialAngle;\n    if (!childNodes) return; // base case: no children of this node\n\n    childNodes.forEach(function (d) {\n      var _ref2, _d$fill;\n      var arcLength = rScale(d[dataKey]);\n      var start = currentAngle;\n      // color priority - if there's a color on the individual point use that, otherwise use parent color or default\n      var fillColor = (_ref2 = (_d$fill = d === null || d === void 0 ? void 0 : d.fill) !== null && _d$fill !== void 0 ? _d$fill : childColor) !== null && _ref2 !== void 0 ? _ref2 : fill;\n      var _polarToCartesian = polarToCartesian(0, 0, innerR + radius / 2, -(start + arcLength - arcLength / 2)),\n        textX = _polarToCartesian.x,\n        textY = _polarToCartesian.y;\n      currentAngle += arcLength;\n      sectors.push(/*#__PURE__*/\n      // TODO: Missing key warning. Can we use `key={d.name}`?\n      React.createElement(\"g\", {\n        \"aria-label\": d.name,\n        tabIndex: 0\n      }, /*#__PURE__*/React.createElement(Sector, {\n        onClick: function onClick() {\n          return handleClick(d);\n        },\n        onMouseEnter: function onMouseEnter(e) {\n          return handleMouseEnter(d, e);\n        },\n        onMouseLeave: function onMouseLeave(e) {\n          return handleMouseLeave(d, e);\n        },\n        fill: fillColor,\n        stroke: stroke,\n        strokeWidth: padding,\n        startAngle: start,\n        endAngle: start + arcLength,\n        innerRadius: innerR,\n        outerRadius: innerR + radius,\n        cx: cx,\n        cy: cy\n      }), /*#__PURE__*/React.createElement(Text, _extends({}, textOptions, {\n        alignmentBaseline: \"middle\",\n        textAnchor: \"middle\",\n        x: textX + cx,\n        y: cy - textY\n      }), d[dataKey])));\n      var _polarToCartesian2 = polarToCartesian(cx, cy, innerR + radius / 2, start),\n        tooltipX = _polarToCartesian2.x,\n        tooltipY = _polarToCartesian2.y;\n      positions.set(d.name, {\n        x: tooltipX,\n        y: tooltipY\n      });\n      return drawArcs(d.children, {\n        radius: radius,\n        innerR: innerR + radius + ringPadding,\n        initialAngle: start,\n        childColor: fillColor\n      });\n    });\n  }\n  drawArcs(data.children, {\n    radius: thickness,\n    innerR: innerRadius,\n    initialAngle: startAngle\n  });\n  var layerClass = clsx('recharts-sunburst', className);\n  function renderTooltip() {\n    var tooltipComponent = findChildByType([children], Tooltip);\n    if (!tooltipComponent || !activeNode) return null;\n    var viewBox = {\n      x: 0,\n      y: 0,\n      width: width,\n      height: height\n    };\n    return /*#__PURE__*/React.cloneElement(tooltipComponent, {\n      viewBox: viewBox,\n      coordinate: positions.get(activeNode.name),\n      payload: [activeNode],\n      active: isTooltipActive\n    });\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx('recharts-wrapper', className),\n    style: {\n      position: 'relative',\n      width: width,\n      height: height\n    },\n    role: \"region\"\n  }, /*#__PURE__*/React.createElement(Surface, {\n    width: width,\n    height: height\n  }, children, /*#__PURE__*/React.createElement(Layer, {\n    className: layerClass\n  }, sectors)), renderTooltip());\n};","map":null,"metadata":{},"sourceType":"module"}