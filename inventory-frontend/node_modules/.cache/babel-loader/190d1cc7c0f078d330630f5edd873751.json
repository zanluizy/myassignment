{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ordinal;\nexports.implicit = void 0;\nvar _index = require(\"../../../lib-vendor/d3-array/src/index.js\");\nvar _init = require(\"./init.js\");\nconst implicit = Symbol(\"implicit\");\nexports.implicit = implicit;\nfunction ordinal() {\n  var index = new _index.InternMap(),\n    domain = [],\n    range = [],\n    unknown = implicit;\n  function scale(d) {\n    let i = index.get(d);\n    if (i === undefined) {\n      if (unknown !== implicit) return unknown;\n      index.set(d, i = domain.push(d) - 1);\n    }\n    return range[i % range.length];\n  }\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new _index.InternMap();\n    for (const value of _) {\n      if (index.has(value)) continue;\n      index.set(value, domain.push(value) - 1);\n    }\n    return scale;\n  };\n  scale.range = function (_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n  scale.copy = function () {\n    return ordinal(domain, range).unknown(unknown);\n  };\n  _init.initRange.apply(scale, arguments);\n  return scale;\n}","map":null,"metadata":{},"sourceType":"script"}